#!/usr/bin/env python3
"""
Quick Test - LangManus Core Functionality

Tests core framework functionality without requiring external API dependencies.
"""

import sys
import os
sys.path.append('src')

def test_core_imports():
    """Test core module imports."""
    print("üîç Testing core imports...")
    
    try:
        # Test direct tool imports (avoiding __init__.py that imports external deps)
        from tools.python_tools import execute_python_code, execute_repl_code
        print("‚úÖ Python tools imported successfully")
        
        from tools.file_tools import save_report, write_file
        print("‚úÖ File tools imported successfully")
        
        from tools.bash_tool import execute_bash_command
        print("‚úÖ Bash tools imported successfully")
        
        from tools.decorators import safe_execute, retry
        print("‚úÖ Decorators imported successfully")
        
        from config.tools import OUTPUT_DIR, CHART_OUTPUT_DIR
        print("‚úÖ Config imported successfully")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Import error: {e}")
        return False


def test_python_tools():
    """Test Python execution tools."""
    print("\nüêç Testing Python tools...")
    
    try:
        from tools.python_tools import execute_python_code
        
        # Test simple code execution
        result = execute_python_code("print('Hello LangManus!')")
        if result['success']:
            print("‚úÖ Python code execution working")
            print(f"   Output: {result['stdout'].strip()}")
        else:
            print(f"‚ùå Python execution failed: {result['error']}")
            
        # Test math calculation
        result = execute_python_code("result = 2 + 2\nprint(f'2 + 2 = {result}')")
        if result['success']:
            print("‚úÖ Python math calculation working")
            print(f"   Output: {result['stdout'].strip()}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Python tools error: {e}")
        return False


def test_file_tools():
    """Test file management tools."""
    print("\nüìÅ Testing file tools...")
    
    try:
        from tools.file_tools import save_report, write_file
        
        # Test report saving
        report_content = """# Test Report

This is a test report generated by LangManus.

## Results
- ‚úÖ File tools are working
- ‚úÖ Report generation successful
"""
        
        result = save_report(report_content, "test_report.md", "test_output")
        if result['success']:
            print("‚úÖ Report saving working")
            print(f"   Saved to: {result['file_path']}")
        else:
            print(f"‚ùå Report saving failed: {result['error']}")
            
        # Test JSON file writing
        test_data = {"framework": "LangManus", "status": "working", "tools": ["python", "file", "bash"]}
        result = write_file("test_output/test_data.json", test_data)
        if result['success']:
            print("‚úÖ JSON file writing working")
            print(f"   File: {result['file_path']}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå File tools error: {e}")
        return False


def test_bash_tools():
    """Test bash execution tools."""
    print("\nüíª Testing bash tools...")
    
    try:
        from tools.bash_tool import execute_bash_command
        
        # Test simple command
        result = execute_bash_command("echo 'LangManus bash tools working!'")
        if result['success']:
            print("‚úÖ Bash command execution working")
            print(f"   Output: {result['stdout'].strip()}")
        else:
            print(f"‚ùå Bash execution failed: {result['error']}")
            
        # Test directory listing
        result = execute_bash_command("ls -la | head -3")
        if result['success']:
            print("‚úÖ Directory listing working")
            lines = result['stdout'].strip().split('\n')
            print(f"   Found {len(lines)} lines of output")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Bash tools error: {e}")
        return False


def test_decorators():
    """Test decorator utilities."""
    print("\nüé® Testing decorators...")
    
    try:
        from tools.decorators import safe_execute, retry
        
        # Test safe execution
        @safe_execute(default_return="fallback value")
        def test_safe_function():
            return "safe execution working"
        
        result = test_safe_function()
        print(f"‚úÖ Safe execute: {result}")
        
        # Test retry mechanism
        call_count = 0
        
        @retry(max_attempts=3, delay=0.1)
        def test_retry_function():
            global call_count
            call_count += 1
            if call_count < 2:
                raise Exception("Intentional test error")
            return "retry working after failure"
        
        result = test_retry_function()
        print(f"‚úÖ Retry mechanism: {result}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Decorators error: {e}")
        return False


def demonstrate_framework_concept():
    """Demonstrate the LangManus framework concept."""
    print("\nüèóÔ∏è LangManus Framework Concept Demo")
    print("="*50)
    
    print("""
üéØ Core Principle: Generic Framework + Dynamic Tool Injection

Traditional AI Framework (Wrong):
   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
   ‚îÇ  Business-Specific  ‚îÇ  ‚Üê Hard-coded for one domain
   ‚îÇ      Prompts        ‚îÇ
   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

LangManus Framework (Right):
   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
   ‚îÇ   Generic Prompts   ‚îÇ  ‚Üê Reusable across domains
   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
              ‚îÇ
   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
   ‚îÇ   Tool Injection    ‚îÇ  ‚Üê Business logic in tools
   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚úÖ Benefits:
  ‚Ä¢ Prompts remain generic and reusable
  ‚Ä¢ Business logic contained in tools
  ‚Ä¢ Easy to add new domains
  ‚Ä¢ Framework stays clean and maintainable
""")


def cleanup_test_files():
    """Clean up test files."""
    try:
        import shutil
        if os.path.exists("test_output"):
            shutil.rmtree("test_output")
            print("üßπ Test files cleaned up")
    except Exception as e:
        print(f"‚ö†Ô∏è Cleanup warning: {e}")


def main():
    """Run the complete test suite."""
    print("üöÄ LangManus Quick Test Suite")
    print("="*50)
    
    # Ensure output directories exist
    os.makedirs("output", exist_ok=True)
    os.makedirs("test_output", exist_ok=True)
    
    # Run tests
    tests = [
        test_core_imports,
        test_python_tools, 
        test_file_tools,
        test_bash_tools,
        test_decorators
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    # Show framework concept
    demonstrate_framework_concept()
    
    # Results
    print(f"\nüìä Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All core functionality tests passed!")
        print("‚úÖ LangManus framework is working correctly")
        print("\nüí° Next steps:")
        print("   1. Add your API keys to .env file")
        print("   2. Install missing dependencies: pip install beautifulsoup4 requests")
        print("   3. Run full demo: python3 demo.py")
    else:
        print("‚ö†Ô∏è Some tests failed. Please check the errors above.")
    
    # Cleanup
    cleanup_test_files()


if __name__ == "__main__":
    main() 